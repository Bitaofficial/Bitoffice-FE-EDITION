import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { FileText, PenTool, Table, Presentation, Mail, Calendar, ArrowRight, User, Settings, LogOut, X } from "lucide-react"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog"
import Link from "next/link"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"

function SignInPage({ onSignIn, onSignUp }) {
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [error, setError] = useState("")

  const handleSubmit = (e) => {
    e.preventDefault()
    // In a real application, you would validate against a backend service
    // For this example, we'll use a hardcoded email and password
    if (email === "user@example.com" && password === "password123") {
      onSignIn({ name: "User", email: email })
    } else {
      setError("Error: Invalid email or password")
    }
  }

  return (
    <div className="min-h-screen bg-background flex items-center justify-center">
      <div className="bg-card text-card-foreground p-8 rounded-lg shadow-lg w-full max-w-md">
        <h2 className="text-2xl font-bold mb-6 text-center">Sign In to BitOffice</h2>
        {error && (
          <Alert variant="destructive" className="mb-4">
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
              Email
            </label>
            <Input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              className="w-full"
            />
          </div>
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
              Password
            </label>
            <Input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              className="w-full"
            />
          </div>
          <Button type="submit" className="w-full">
            Sign In
          </Button>
        </form>
        <p className="mt-4 text-center text-sm">
          Don't have an account?{" "}
          <Button variant="link" className="p-0" onClick={onSignUp}>
            Sign up
          </Button>
        </p>
      </div>
    </div>
  )
}

function SignUpPage({ onSignUp }) {
  const [formData, setFormData] = useState({ name: "", email: "", password: "", confirmPassword: "" })
  const [error, setError] = useState("")

  const handleInputChange = (e) => {
    setFormData({ ...formData, [e.target.id]: e.target.value })
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    if (formData.password !== formData.confirmPassword) {
      setError("Passwords do not match")
      return
    }
    // In a real application, you would send this data to your backend
    onSignUp({ name: formData.name, email: formData.email })
  }

  return (
    <div className="min-h-screen bg-background flex items-center justify-center">
      <div className="bg-card text-card-foreground p-8 rounded-lg shadow-lg w-full max-w-md">
        <h2 className="text-2xl font-bold mb-6 text-center">Sign Up for BitOffice</h2>
        {error && (
          <Alert variant="destructive" className="mb-4">
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
              Name
            </label>
            <Input
              id="name"
              type="text"
              value={formData.name}
              onChange={handleInputChange}
              required
              className="w-full"
            />
          </div>
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
              Email
            </label>
            <Input
              id="email"
              type="email"
              value={formData.email}
              onChange={handleInputChange}
              required
              className="w-full"
            />
          </div>
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
              Password
            </label>
            <Input
              id="password"
              type="password"
              value={formData.password}
              onChange={handleInputChange}
              required
              className="w-full"
            />
          </div>
          <div>
            <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-1">
              Confirm Password
            </label>
            <Input
              id="confirmPassword"
              type="password"
              value={formData.confirmPassword}
              onChange={handleInputChange}
              required
              className="w-full"
            />
          </div>
          <Button type="submit" className="w-full">
            Sign Up
          </Button>
        </form>
        <p className="mt-4 text-center text-sm">
          Already have an account?{" "}
          <Button variant="link" className="p-0" onClick={() => onSignUp(null)}>
            Sign in
          </Button>
        </p>
      </div>
    </div>
  )
}

function Dashboard({ user, onLogout }) {
  const [activeApp, setActiveApp] = useState(null)
  const [spreadsheets, setSpreadsheets] = useState([])
  const [documents, setDocuments] = useState([])

  const openApp = (app) => {
    setActiveApp(app)
  }

  const closeApp = () => {
    setActiveApp(null)
  }

  const createNewSpreadsheet = () => {
    const newSpreadsheet = {
      id: Date.now(),
      name: `Spreadsheet ${spreadsheets.length + 1}`,
      lastEdited: new Date().toLocaleString()
    }
    setSpreadsheets([...spreadsheets, newSpreadsheet])
    setActiveApp('spreadsheet')
  }

  const createNewDocument = () => {
    const newDocument = {
      id: Date.now(),
      name: `Document ${documents.length + 1}`,
      content: "",
      lastEdited: new Date().toLocaleString()
    }
    setDocuments([...documents, newDocument])
    setActiveApp({ type: 'document', id: newDocument.id })
  }

  return (
    <div className="min-h-screen bg-background">
      <header className="bg-primary text-primary-foreground py-4">
        <div className="container mx-auto px-4 flex justify-between items-center">
          <h1 className="text-2xl font-bold">BitOffice Dashboard</h1>
          <div className="flex items-center space-x-4">
            <span>Welcome, {user.name}</span>
            <Button variant="ghost" size="sm" onClick={onLogout}>
              <LogOut className="mr-2 h-4 w-4" />
              Logout
            </Button>
          </div>
        </div>
      </header>
      <main className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-card text-card-foreground p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold mb-4">Quick Access</h2>
            <ul className="space-y-2">
              <li><Button variant="ghost" className="w-full justify-start" onClick={createNewSpreadsheet}><Table className="mr-2 h-4 w-4" /> New Spreadsheet</Button></li>
              <li>
                <Button variant="ghost" className="w-full justify-start" onClick={createNewDocument}>
                  <FileText className="mr-2 h-4 w-4" /> New Document
                </Button>
              </li>
              <li><Button variant="ghost" className="w-full justify-start"><Presentation className="mr-2 h-4 w-4" /> New Presentation</Button></li>
            </ul>
          </div>
          <div className="bg-card text-card-foreground p-6 rounded-lg shadow md:col-span-2">
            <h2 className="text-xl font-semibold mb-4">Recent Files</h2>
            <ul className="space-y-2">
              {spreadsheets.map(spreadsheet => (
                <li key={spreadsheet.id} className="flex items-center justify-between p-2 hover:bg-accent rounded">
                  <span className="flex items-center"><Table className="mr-2 h-4 w-4" /> {spreadsheet.name}</span>
                  <span className="text-sm text-muted-foreground">Edited {spreadsheet.lastEdited}</span>
                </li>
              ))}
              {documents.map(document => (
                <li key={document.id} className="flex items-center justify-between p-2 hover:bg-accent rounded">
                  <span className="flex items-center"><FileText className="mr-2 h-4 w-4" /> {document.name}</span>
                  <span className="text-sm text-muted-foreground">Edited {document.lastEdited}</span>
                </li>
              ))}
              <li className="flex items-center justify-between p-2 hover:bg-accent rounded">
                <span className="flex items-center"><Presentation className="mr-2 h-4 w-4" /> Company Overview.pptx</span>
                <span className="text-sm text-muted-foreground">Edited 3 days ago</span>
              </li>
            </ul>
          </div>
        </div>
        {activeApp === 'spreadsheet' && (
          <div className="mt-8">
            <Spreadsheet onClose={closeApp} />
          </div>
        )}
        {activeApp && activeApp.type === 'document' && (
          <div className="mt-8">
            <DocumentEditor
              document={documents.find(doc => doc.id === activeApp.id)}
              onClose={closeApp}
              onSave={(updatedDocument) => {
                setDocuments(documents.map(doc => doc.id === updatedDocument.id ? updatedDocument : doc))
              }}
            />
          </div>
        )}
      </main>
    </div>
  )
}

function Spreadsheet({ onClose }) {
  const columns = ['A', 'B', 'C', 'D', 'E']
  const rows = [1, 2, 3, 4, 5]

  return (
    <div className="bg-background p-4 rounded-lg shadow-lg">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-xl font-semibold">New Spreadsheet</h3>
        <Button variant="ghost" size="icon" onClick={onClose}>
          <X className="h-4 w-4" />
        </Button>
      </div>
      <div className="overflow-x-auto">
        <table className="w-full border-collapse">
          <thead>
            <tr>
              <th></th>
              {columns.map(column => (
                <th key={column} className="border border-input p-2 text-center">{column}</th>
              ))}
            </tr>
          </thead>
          <tbody>
            {rows.map(row => (
              <tr key={row}>
                <th className="border border-input p-2 text-center">{row}</th>
                {columns.map(column => (
                  <td key={`${row}${column}`} className="border border-input p-2">
                    <Input className="w-full h-full border-none p-0" />
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}

function DocumentEditor({ document, onClose, onSave }) {
  const [content, setContent] = useState(document.content)

  const handleSave = () => {
    const updatedDocument = {
      ...document,
      content: content,
      lastEdited: new Date().toLocaleString()
    }
    onSave(updatedDocument)
  }

  return (
    <div className="bg-background p-4 rounded-lg shadow-lg">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-xl font-semibold">{document.name}</h3>
        <div className="flex gap-2">
          <Button variant="ghost" size="sm" onClick={handleSave}>
            Save
          </Button>
          <Button variant="ghost" size="icon" onClick={onClose}>
            <X className="h-4 w-4" />
          </Button>
        </div>
      </div>
      <Textarea
        value={content}
        onChange={(e) => setContent(e.target.value)}
        className="w-full h-[400px] p-2"
        placeholder="Start typing your document here..."
      />
    </div>
  )
}

export default function LandingPage() {
  const [user, setUser] = useState(null)
  const [showSignUp, setShowSignUp] = useState(false)

  const handleSignIn = (userData) => {
    setUser(userData)
  }

  const handleSignUp = (userData) => {
    if (userData === null) {
      setShowSignUp(false)
    } else {
      setUser(userData)
    }
  }

  const handleLogout = () => {
    setUser(null)
    setShowSignUp(false)
  }

  if (!user) {
    if (showSignUp) {
      return <SignUpPage onSignUp={handleSignUp} />
    } else {
      return <SignInPage onSignIn={handleSignIn} onSignUp={() => setShowSignUp(true)} />
    }
  }

  return (
    <div className="min-h-screen flex flex-col">
      <Dashboard user={user} onLogout={handleLogout} />
    </div>
  )
}
